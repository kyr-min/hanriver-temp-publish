{"version":3,"sources":["HanRiver.js","action.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["HanRiver","riverInfo","useSelector","state","data","requestStatus","status","dispatch","useDispatch","useEffect","type","axios","get","then","response","payload","catch","error","console","log","className","style","fontSize","temp","time","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAoCeA,G,MA9BE,WACb,IAAIC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QACvCC,EAAgBH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,UAE3CC,EAAWC,cAMf,OAJAC,qBAAU,WACNF,GCVG,SAACA,GACJA,EAAS,CAACG,KAAM,oBAChBC,IAAMC,IAAI,mCAAmCC,MAAK,SAAAC,GAC9CP,EAAS,CACLG,KAAM,kBACNK,QAASD,EAASV,UAEvBY,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZV,EAAS,CAACG,KAAM,4BDErB,CAACH,IAEiB,YAAlBF,EAEK,wDAOJ,qBAAKe,UAAY,WAAjB,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKC,MAAS,CAACC,SAAU,IAAzB,oDAA4C,uBAC5C,qBAAKD,MAAS,CAACC,SAAU,IAAzB,SAA+BrB,EAAUsB,OAAW,uBACpD,qBAAKF,MAAS,CAACC,SAAU,IAAzB,SAA+BrB,EAAUuB,OAAW,8BEnBrDC,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCOSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCPRO,EAAe,CACjB5B,OAAQ,UACRF,KAAM,CACFmB,KAAM,GACNC,KAAM,KA6BCW,EAzBE,WAAmC,IAAlChC,EAAiC,uDAAzB+B,EAAcE,EAAW,uCAC/C,OAAOA,EAAO1B,MACV,IAAK,kBACD,OAAO,2BACAP,GADP,IAEIG,OAAQ,YAGhB,IAAK,kBACD,MAAO,CACHA,OAAQ,UACRF,KAAMgC,EAAOrB,SAGrB,IAAK,kBACD,OAAO,2BACAZ,GADP,IAEIG,OAAQ,UAGhB,QACI,OAAOH,I,eClBfkC,EAAQC,YAAYH,EAASI,YAAgBC,MAEjDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.90332b93.chunk.js","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { getHanRiver } from './action';\r\n\r\nimport './style.css'\r\n\r\nconst HanRiver = () => {\r\n    let riverInfo = useSelector(state => state.data);\r\n    let requestStatus = useSelector(state => state.status);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getHanRiver());\r\n    }, [dispatch]);\r\n\r\n    if(requestStatus === 'PENDING'){\r\n        return (\r\n            <h1>\r\n                로딩중....\r\n            </h1>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className = \"hanriver\">\r\n            <div className=\"hanriver-info\">\r\n                <div style = {{fontSize: 45}}>현재 한강 온도</div><br/>\r\n                <div style = {{fontSize: 40}}>{riverInfo.temp}</div><br/>\r\n                <div style = {{fontSize: 20}}>{riverInfo.time}</div><br/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default HanRiver;","import axios from 'axios';\r\n\r\nexport const getHanRiver = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: 'REQUEST_PENDING'})\r\n        axios.get('https://hanriver.herokuapp.com/').then(response => {\r\n            dispatch({\r\n                type: 'REQUEST_SUCCESS',\r\n                payload: response.data\r\n            });\r\n        }).catch(error => {\r\n            console.log(error);\r\n            dispatch({type: 'REQUEST_FAILURE'});\r\n        })\r\n    }\r\n\r\n};\r\n\r\n","import HanRiver from './HanRiver'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HanRiver />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    status: 'SUCCESS',\r\n    data: {\r\n        temp: '',\r\n        time: ''\r\n    }\r\n}\r\n\r\nconst  reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'REQUEST_PENDING':\r\n            return {\r\n                ...state,\r\n                status: 'PENDING'\r\n            }\r\n\r\n        case 'REQUEST_SUCCESS':\r\n            return {\r\n                status: 'SUCCESS',\r\n                data: action.payload\r\n            }\r\n\r\n        case 'REQUEST_FAILURE':\r\n            return {\r\n                ...state,\r\n                status: 'ERROR'\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer from './reducer';\nimport { createStore , applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\n\n\nlet store = createStore(reducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}